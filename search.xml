<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis与MySQL数据一致性问题</title>
      <link href="/2025/08/20/%E6%B5%8B%E8%AF%95/"/>
      <url>/2025/08/20/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;以前都是做单体项目，通常基于单一应用服务 + 单一数据库，数据操作集中在本地，不存在跨服务&#x2F;跨节点的通信延迟或故障问题。所以很少会想到要考虑数据一致性的问题，最有可能需要考虑数据一致性可能就是多表事务操作，首先想到就是通过事务 <strong>@Transactional</strong> 来解决，整体相对简单可控。<br>&emsp;&emsp;后来学习到了分布式微服务（SpringCloud）后，意识到一个大的项目里涉及到很多独立的服务，可能会涉及到多个不同的数据库，为了提高项目的速度又需要一些消息队列、缓存等一些相关的组件，就会面临跨服务事务、多数据源同步、中间件导致的延迟、节点故障等等问题，此时数据一致性问题就是一个需要重点解决的问题，而且比较复杂。<br>&emsp;&emsp;这里以Redis和MySQL为例子进行讨论  </p><h1 id="可能会导致Redis和MySQL数据不一致的原因有哪些"><a href="#可能会导致Redis和MySQL数据不一致的原因有哪些" class="headerlink" title="可能会导致Redis和MySQL数据不一致的原因有哪些"></a>可能会导致Redis和MySQL数据不一致的原因有哪些</h1><h2 id="（一）更新顺序导致的不一致"><a href="#（一）更新顺序导致的不一致" class="headerlink" title="（一）更新顺序导致的不一致"></a>（一）更新顺序导致的不一致</h2><ol><li><strong>先更新Redis，再更新MySQL</strong>：假设线程A先更新了 Redis 中的数据，此时线程A因为某些故障（网络超时、程序崩溃等等）未能更新 MySQL ，导致 MySQL 中仍然旧数据，如果 Redis 没有设置过期时间，此不一致会永久存在，也就是“缓存新，数据库旧”。 </li><li><strong>先删除Redis，再更新MySQL</strong>：删除 Redis 缓存后，再更新 MySQL ，如果此时并发了一个线程，在 MySQL 数据更新前又访问了这个数据，那么会将 MySQL 的旧数据写回 Redis 。（高并发场景下会发生） </li><li><strong>先更新MySQL，再更新Redis</strong>：多线程并发更新的时候，后更新的 MySQL 线程可能会先更新 Redis ，导致 Redis 被旧值覆盖。这里可能会比较复杂，我这里举个例子来说明：假设初始状态 MySQL 余额为100，Redis 缓存为100；线程A先更新 MySQL 为+100，准备更新 Redis ，此时并发了一个线程B更新+100，因为 MySQL 的行锁要等待A完成操作后释放了锁，B线程才可以进行操作；如果线程B释放锁后更快执行，那么线程B就会更新 Redis 为300；后面线程A恢复执行，将 Redis 从300改为200。（多写并发下会发生）</li></ol><h2 id="（二）缓存策略的缺陷"><a href="#（二）缓存策略的缺陷" class="headerlink" title="（二）缓存策略的缺陷"></a>（二）缓存策略的缺陷</h2><ol><li><strong>缓存没有设置过期时间</strong>：Redis 在存储数据时，如果指定了过期时间，缓存数据到了过期时间就会失效；如果没有设置过期时间，MySQL 数据更新后，若没有主动操作 Redis ，Redis 会永久保留旧数据。  </li><li><strong>缓存过期时间过长&#x2F;过短</strong>：过期时间过长会导致缓存滞后；过期时间过短会导致缓存穿透的风险提高，会导致MySQL性能严重下降，使得主从同步延迟，可能会将旧数据写回Redis中。  <blockquote><p><strong>缓存穿透</strong>：数据即不再缓存中，也不再数据库中，导致大量查询请求落在数据库上，导致数据库压力骤增<br><strong>缓存雪崩</strong>：大量缓存数据在同一时间过期（失效）或者 Redis 故障宕机，如果此时有大量用户请求， Redis 则无法处理，于是全部请求都直接访问数据库，导致数据库压力骤增，严重的可能会导致数据库宕机，进而造成系统崩溃<br><strong>缓存击穿</strong>：缓存中某个热点数据过期，此时大量请求访问该热点数据，无法从缓存读取就导致了大量请求直接访问数据库（可以认为缓存击穿是缓存雪崩的一个子集）</p></blockquote></li></ol><h2 id="（三）分布式环境问题"><a href="#（三）分布式环境问题" class="headerlink" title="（三）分布式环境问题"></a>（三）分布式环境问题</h2><ol><li><strong>网络同步指令缺失</strong>：分布式环境中，Redis 和 MySQL 通常部署在不同的服务器上，通过网络进行通信，应用与 Redis 、应用与 MySQL 之间的网络可能中断，应用在更新 MySQL 成功后，因网络问题无法及时更新 Redis，导致 Redis 中的数据未能同步更新，网络恢复后，Redis 中可能依然存在旧的数据。  </li><li><strong>服务器宕机导致缓存&#x2F;数据库数据回滚</strong>：MySQL 主节点宕机后，最后一次更新未同步到从节点，导致从节点被选举为主节点的时候数据缺失；后续 Redis 请求的也是旧数据。  </li><li><strong>分布式事务缺失</strong>：如果没有使用本地事务来包裹更新操作，可能会导致某一个节点比如说 Redis 操作不在事务内，数据更新出现了问题无法回滚和重试</li></ol><h1 id="如何解决呢？"><a href="#如何解决呢？" class="headerlink" title="如何解决呢？"></a>如何解决呢？</h1><ol><li>有序列表项  </li><li>有序列表项</li></ol><ul><li>无序列表项  </li><li>无序列表项</li></ul><blockquote><p>引用内容示例，可用于标注名言、备注等。</p></blockquote><p><img src="/images/post-image.jpg" alt="本地图片示例"><br><em>图片说明，本地图片放 <code>source/images</code> 目录，路径从 <code>source</code> 根目录算</em>  </p><p><a href="https://example.com/">外部链接</a>  </p><pre><code class="python"># 代码块示例（带语言标识，实现语法高亮）print(&quot;Hello, Hexo + Butterfly!&quot;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 组件 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 精选 </tag>
            
            <tag> 热门 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Redis </tag>
            
            <tag> 数据一致性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/08/15/hello-world/"/>
      <url>/2025/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
