<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>缓存与数据库一致性问题</title>
      <link href="/2025/08/20/Redis%E5%92%8CMysql%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/"/>
      <url>/2025/08/20/Redis%E5%92%8CMysql%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;以前都是做单体项目，通常基于单一应用服务 + 单一数据库，数据操作集中在本地，不存在跨服务&#x2F;跨节点的通信延迟或故障问题。所以很少会想到要考虑数据一致性的问题，最有可能需要考虑数据一致性可能就是多表事务操作，首先想到就是通过事务 <strong>@Transactional</strong> 来解决，整体相对简单可控。<br>&emsp;&emsp;后来学习到了分布式微服务（SpringCloud）后，意识到一个大的项目里涉及到很多独立的服务，可能会涉及到多个不同的数据库，为了提高项目的速度又需要一些消息队列、缓存等一些相关的组件，就会面临跨服务事务、多数据源同步、中间件导致的延迟、节点故障等等问题，此时数据一致性问题就是一个需要重点解决的问题，而且比较复杂。<br>&emsp;&emsp;这里以<strong>Redis</strong>和<strong>MySQL</strong>为例子进行讨论  </p><h1 id="可能会导致缓存（Redis）和数据库（MySQL）数据不一致的原因有哪些"><a href="#可能会导致缓存（Redis）和数据库（MySQL）数据不一致的原因有哪些" class="headerlink" title="可能会导致缓存（Redis）和数据库（MySQL）数据不一致的原因有哪些"></a>可能会导致缓存（Redis）和数据库（MySQL）数据不一致的原因有哪些</h1><h2 id="（一）更新顺序导致的不一致"><a href="#（一）更新顺序导致的不一致" class="headerlink" title="（一）更新顺序导致的不一致"></a>（一）更新顺序导致的不一致</h2><ol><li><strong>先更新Redis，再更新MySQL</strong>：假设线程A先更新了 Redis 中的数据，此时线程A因为某些故障（网络超时、程序崩溃等等）未能更新 MySQL ，导致 MySQL 中仍然旧数据，如果 Redis 没有设置过期时间，此不一致会永久存在，也就是“缓存新，数据库旧”。 </li><li><strong>先删除Redis，再更新MySQL</strong>：删除 Redis 缓存后，再更新 MySQL ，如果此时并发了一个线程，在 MySQL 数据更新前又访问了这个数据，那么会将 MySQL 的旧数据写回 Redis 。（高并发场景下会发生） </li><li><strong>先更新MySQL，再更新Redis</strong>：多线程并发更新的时候，后更新的 MySQL 线程可能会先更新 Redis ，导致 Redis 被旧值覆盖。这里可能会比较复杂，我这里举个例子来说明：假设初始状态 MySQL 余额为100，Redis 缓存为100；线程A先更新 MySQL 为+100，准备更新 Redis ，此时并发了一个线程B更新+100，因为 MySQL 的行锁要等待A完成操作后释放了锁，B线程才可以进行操作；如果线程B释放锁后更快执行，那么线程B就会更新 Redis 为300；后面线程A恢复执行，将 Redis 从300改为200。（多写并发下会发生）</li></ol><h2 id="（二）缓存策略的缺陷"><a href="#（二）缓存策略的缺陷" class="headerlink" title="（二）缓存策略的缺陷"></a>（二）缓存策略的缺陷</h2><ol><li><strong>缓存没有设置过期时间</strong>：Redis 在存储数据时，如果指定了过期时间，缓存数据到了过期时间就会失效；如果没有设置过期时间，MySQL 数据更新后，若没有主动操作 Redis ，Redis 会永久保留旧数据。  </li><li><strong>缓存过期时间过长&#x2F;过短</strong>：过期时间过长会导致缓存滞后；过期时间过短会导致缓存穿透的风险提高，会导致MySQL性能严重下降，使得主从同步延迟，可能会将旧数据写回Redis中。  <blockquote><p><strong>缓存穿透</strong>：数据即不再缓存中，也不再数据库中，导致大量查询请求落在数据库上，导致数据库压力骤增<br><strong>缓存雪崩</strong>：大量缓存数据在同一时间过期（失效）或者 Redis 故障宕机，如果此时有大量用户请求， Redis 则无法处理，于是全部请求都直接访问数据库，导致数据库压力骤增，严重的可能会导致数据库宕机，进而造成系统崩溃<br><strong>缓存击穿</strong>：缓存中某个热点数据过期，此时大量请求访问该热点数据，无法从缓存读取就导致了大量请求直接访问数据库（可以认为缓存击穿是缓存雪崩的一个子集）</p></blockquote></li></ol><h2 id="（三）分布式环境问题"><a href="#（三）分布式环境问题" class="headerlink" title="（三）分布式环境问题"></a>（三）分布式环境问题</h2><ol><li><strong>网络同步指令缺失</strong>：分布式环境中，Redis 和 MySQL 通常部署在不同的服务器上，通过网络进行通信，应用与 Redis 、应用与 MySQL 之间的网络可能中断，应用在更新 MySQL 成功后，因网络问题无法及时更新 Redis，导致 Redis 中的数据未能同步更新，网络恢复后，Redis 中可能依然存在旧的数据。  </li><li><strong>服务器宕机导致缓存&#x2F;数据库数据回滚</strong>：MySQL 主节点宕机后，最后一次更新未同步到从节点，导致从节点被选举为主节点的时候数据缺失；后续 Redis 请求的也是旧数据。  </li><li><strong>分布式事务缺失</strong>：如果没有使用本地事务来包裹更新操作，可能会导致某一个节点比如说 Redis 操作不在事务内，数据更新出现了问题无法回滚和重试</li></ol><h1 id="如何解决呢？"><a href="#如何解决呢？" class="headerlink" title="如何解决呢？"></a>如何解决呢？</h1><h2 id="单体服务下的数据一致性方案"><a href="#单体服务下的数据一致性方案" class="headerlink" title="单体服务下的数据一致性方案"></a>单体服务下的数据一致性方案</h2><p>在单体服务中，Redis 和 MySQL 的操作都由同一个应用控制，问题相对简单，主要考虑<em>缓存与数据库更新的顺序</em>。</p><h3 id="Cache-Aside-Pattern（旁路缓存模式）"><a href="#Cache-Aside-Pattern（旁路缓存模式）" class="headerlink" title="Cache Aside Pattern（旁路缓存模式）"></a>Cache Aside Pattern（旁路缓存模式）</h3><ul><li>读：先读缓存 → 缓存没有 → 查数据库 → 回写缓存</li><li>写：先更新数据库，再删除缓存<blockquote><p><strong>为什么是先更新数据库，再删除缓存？</strong></p><ol><li>直接 “更新缓存” 的最大风险是在并发写&#x2F;读写场景下，极易导致缓存数据与数据库数据 “永久不一致”;而 “删除缓存” 能从根源规避这一问题,暂时的 “缓存缺失” 仅会导致一次额外的数据库查询，而非永久的数据不一致。（上文提到的先更新 MySQL，再更新 Redis中“后面线程 A 恢复执行，将 Redis 从 300 改为 200”；但是如果是删除缓存，那么缓存会被删除，并写上数据库的数据，仍然是300，无非就是多了一次数据库查询，但是保证了数据一致性）</li><li>其次直接 “更新缓存” 会产生大量不必要的计算和存储成本，而 “删除缓存” 仅需一次轻量操作</li></ol></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper; <span class="comment">// MyBatis操作MySQL</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate; <span class="comment">// 用于操作 Redis 缓存</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;user:&quot;</span>; <span class="comment">// Redis 缓存键的前缀</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户 ID 查询用户信息（旁路缓存模式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户对象（User），如果不存在则返回 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> USER_KEY_PREFIX + userId;</span><br><span class="line">        <span class="comment">// 1. 优先从 Redis 缓存中读取用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 缓存未命中，从 MySQL 数据库查询用户信息</span></span><br><span class="line">        user = userMapper.selectById(userId);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 3. 回写缓存</span></span><br><span class="line">            redisTemplate.opsForValue().set(key, user, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 更新数据库</span></span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">        <span class="comment">// 2. 删除缓存（而不是更新缓存）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> USER_KEY_PREFIX + user.getId();</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="延时双删策略（解决并发写的问题）"><a href="#延时双删策略（解决并发写的问题）" class="headerlink" title="延时双删策略（解决并发写的问题）"></a>延时双删策略（解决并发写的问题）</h3><p>延时双删策略是基于<em>先删除缓存，再更新数据库</em>的一种改进，也就是在更新数据库之后再进行延时删除缓存。在“写”操作时，可以先删一次缓存，延时一小段时间后再删一次，避免并发下缓存脏数据的情况。</p><blockquote><p><strong>为什么先删除一次缓存？</strong><br>主要是为了确保在数据库更新期间，缓存中的旧数据不会被读取，从而避免返回不一致的数据</p><ul><li>（假设先不删除缓存）：</li><li>线程A执行更新操作，正在更新数据库（更新尚未完成）</li><li>线程B同时查询数据，发现缓存中有旧数据，直接返回旧数据，导致读取到不一致的数据</li><li>（假设先删除一次缓存）：</li><li>删除缓存后，如果线程B有查询请求，发现缓存不存在，就回去数据库查询最新数据（即使数据库更新尚未完成，也会等待事务提交，获取最新数据；即使没有添加事务，也会因为线程A更新mysql会加行锁，那么线程B依然能读到最新的数据）</li></ul></blockquote><blockquote><p><strong>为什么更新完数据库后，要延迟后再删除一次缓存？</strong><br>主要是为了解决在高并发场景下，数据库更新后缓存可能被重新写入旧数据的问题。</p><ul><li>（假设不再延迟后再删除一次缓存）：</li><li>线程A先删除缓存，然后开始更新数据库（更新尚未完成）</li><li>线程B查询数据，发现缓存为空，去数据库查询，获取到的是旧数据（因为线程A的更新事务尚未提交）</li><li>线程B将旧数据写回到缓存，缓存中的数据就变成了旧数据</li><li>线程A完成数据库更新，但缓存中仍然是旧数据，导致后续查询返回不一致的数据</li><li>（假设延迟后再删除一次缓存）：</li><li>数据库完成更新后，等待一段时间（延迟），再次删除缓存，可以清理掉这段时间内可能被其他线程回写的旧数据</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserWithDelay</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> USER_KEY_PREFIX + user.getId();</span><br><span class="line">    <span class="comment">// 先删缓存</span></span><br><span class="line">    redisTemplate.delete(key);</span><br><span class="line">    <span class="comment">// 更新数据库</span></span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 延时双删</span></span><br><span class="line">    CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">1000</span>); &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;&#125;</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分布式服务下的数据一致性解决方案"><a href="#分布式服务下的数据一致性解决方案" class="headerlink" title="分布式服务下的数据一致性解决方案"></a>分布式服务下的数据一致性解决方案</h2><p>在分布式场景下，问题更复杂，要考虑多服务节点同时操作缓存和数据库、跨服务调用链路更长，可能出现延迟、消息丢失、服务宕机等情况。一般考虑保证最终一致性而非强一致性</p><h3 id="本地事务-消息队列（基于消息队列的最终一致性方案）"><a href="#本地事务-消息队列（基于消息队列的最终一致性方案）" class="headerlink" title="本地事务 + 消息队列（基于消息队列的最终一致性方案）"></a>本地事务 + 消息队列（基于消息队列的最终一致性方案）</h3><p>更新数据库后，发送一个消息到 MQ（Kafka、RabbitMQ 等），由专门的消费者服务异步更新或删除 Redis 缓存，如果消息失败，可以通过重试、死信队列来兜底。通过消息队列解耦服务、支持水平扩展，且在分布式环境中容错性强，优选方案</p><p><strong>服务流程</strong></p><ol><li>服务 A 更新 MySQL，事务提交，保证业务成功就一定有消息</li><li>发送消息到 RabbitMQ（包含用户 ID 或变更数据，这样线程A就不用自己操作Redis，Redis的更新就交给了异步消费者处理）</li><li>服务 B 订阅队列，收到消息后，从 MySQL 拉取最新数据，更新 Redis</li><li>读请求优先查 Redis，miss 时回查 MySQL<blockquote><p><strong>什么是消息队列?</strong><br>消息队列（Message Queue, MQ）是一种异步通信中间件，提供“发送消息——存储——投递——消费”的功能，通俗一点的理解就是一个“快递中转站”，生产者把消息丢到队列里，消费者从队列里获取消息处理<br><strong>为什么要用消息队列？</strong></p><ol><li>解耦：订单系统只需要负责“下单成功——发消息”，不用管其他系统是否正常；也就是说不同服务用消息传递，避免强依赖同步调用，系统间能够减少依赖，改动灵活</li><li>异步：秒杀&#x2F;大促场景，瞬间几十万的请求——MQ先存起来，消费者慢慢消费，避免数据库&#x2F;服务被压垮；而且MQ保证消息可靠存储，宕机后还能恢复</li><li>最终一致性：下单成功后只需要保证消息入队成功，消费者失败可以<strong>重试&#x2F;补偿</strong>，最终还是能完成扣库存，配合“本地事务+消息”，保证数据最终一致性</li><li>广播：一条消息，多个订阅者可以消费，比如在分布式服务里，“用户注册成功”——发送欢迎短信，送优惠券等等，都可以并行订阅消息</li></ol><p><strong>最终一致性体现在哪里？</strong><br>写完MySQL——消息还没消费——Redis还没更新，这时可能出现短暂不一致（MySQL是新数据，Redis是旧数据）；一旦消息被消费——Redis更新为最新数据——数据一致，追求的是最终一致性（延迟同步）</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MQ配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">userUpdateQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;user-update-queue&quot;</span>, <span class="literal">true</span>); <span class="comment">// 持久化队列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Redis服务</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisService</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存用户到 Redis，设置 TTL 为 30min</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user:&quot;</span> + user.getId(), user, <span class="number">1800</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 Redis 获取用户</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (User) redisTemplate.opsForValue().get(<span class="string">&quot;user:&quot;</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息生产者</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserUpdateProducer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;user-update-queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserUpdateProducer</span><span class="params">(RabbitTemplate rabbitTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送用户 ID 到消息队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendUpdateMessage</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(QUEUE_NAME, userId);</span><br><span class="line">        <span class="comment">// 可记录日志或监控</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Sent message for user: &quot;</span> + userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息消费者</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserUpdateConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserUpdateConsumer</span><span class="params">(UserRepository userRepository, RedisService redisService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userRepository = userRepository;</span><br><span class="line">        <span class="built_in">this</span>.redisService = redisService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列，异步更新 Redis</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;user-update-queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleUpdate</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="comment">// 从 MySQL 获取最新数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findById(userId).orElse(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            redisService.saveUser(user); <span class="comment">// 更新 Redis</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Updated Redis for user: &quot;</span> + userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务服务</span></span><br><span class="line">Service</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisService redisService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserUpdateProducer producer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserRepository userRepository, RedisService redisService, UserUpdateProducer producer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userRepository = userRepository;</span><br><span class="line">        <span class="built_in">this</span>.redisService = redisService;</span><br><span class="line">        <span class="built_in">this</span>.producer = producer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读操作：优先查 Redis，miss 时查 MySQL 并回填</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> redisService.getUser(id);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> user; <span class="comment">// 缓存命中</span></span><br><span class="line">        &#125;</span><br><span class="line">        user = userRepository.findById(id).orElse(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            redisService.saveUser(user); <span class="comment">// 回填 Redis</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写操作：更新 MySQL，事务提交后发消息</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User updatedUser)</span> &#123;</span><br><span class="line">        userRepository.save(updatedUser); <span class="comment">// 更新 MySQL</span></span><br><span class="line">        producer.sendUpdateMessage(updatedUser.getId()); <span class="comment">// 异步通知</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CDC（Change-Data-Capture）"><a href="#CDC（Change-Data-Capture）" class="headerlink" title="CDC（Change Data Capture）"></a>CDC（Change Data Capture）</h3><p>原理很简单，使用工具（Canal、Debezium等）监听MySQL的Binlog日志，捕获数据库变更，将变更事件实时推送至Redis或其他消费者。核心思想就是通过数据库日志实现无侵入式同步，Redis直接获取MySQL最新数据</p><p><strong>服务流程</strong></p><ol><li>MySQL开启Binlog</li><li>MySQL数据发生变动的时候，Canal&#x2F;Debezium解析Binlog，生成变更事件（如 JSON 格式）</li><li>事件推送到Redis（或者交给消息队列中转）</li></ol><blockquote><p><strong>CDC相比“基于消息队列的方案”存在的问题</strong></p><ol><li>无法保证业务逻辑的一致性：CDC只看到数据变更，不知道业务逻辑；而且CDC拿到的是单表的行变更，而不是“业务操作完成”的事件，多表环境下可能会导致数据变更不知道那些属于同一次事务</li><li>性能&#x2F;耦合问题：对数据库性能有影响，尤其是高并发+binlog大量订阅；CDC组件本身要额外部署和运维，不同数据库的日志格式差异极大，需针对每种数据库适配CDC工具，会导致系统就会很复杂</li><li>补偿问题：MQ天然支持重试以及数据的持久，但是CDC一旦消费失败，要自己记录offset，处理回放逻辑</li></ol><p><strong>CDC适合无侵入式数据同步的场景，MQ适合强调业务的分布式事务，最好的折中办法是结合两者，CDC保证数据最终一致，消息队列保证实时业务交互</strong></p></blockquote><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>分布式事务框架（如Seata）通过2PC（两阶段提交）或TCC等来确保MySQL和Redis更新在同一事务中，追求<strong>强一致性</strong>，MySQL和Redis要么全部成功，要么全部失败。一般很少会单独使用，除非是特定的要求强一致性场景，比如说金融交易，库存扣减，特别是银行系统，一天核心接口qps都不超过100的那种<br>这里其实还有一种<strong>分布式锁</strong>：保证同一时刻，只有一个实例能操作这份资源，避免并发冲突。但是很少使用这个办法，会消耗掉非常多的性能，也是仅仅局限于特殊的强一致性场景 </p><p><strong>常见的分布式事务解决方案</strong></p><ol><li><strong>2PC（两阶段提交）</strong>：通俗一点讲就是协调者询问所有参与者“能提交吗？”（写入预提交日志），如果都回复“能”，协调者通知提交；否则全部回滚（系统默认）</li><li><strong>TCC（Try-Confirm-Cancel）</strong>：把业务操作拆成三步，Try：尝试预留资源（比如冻结库存、冻结余额）、Confirm：真正提交（扣减库存，扣余额）、Cancel：取消预留（释放冻结的库存&#x2F;余额）</li><li><strong>Saga（长事务补偿机制）</strong>：把一个大事务拆成一系列本地事务，每个本地事务成功后，如果后续失败，需要触发补偿操作。（后续有了消息队列，这个方案也几乎不用了）</li><li><strong>本地事务 + 消息队列</strong>：也就是之前提到的基于消息队列的一致性方案，最推荐</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GlobalTransactional</span> <span class="comment">// Seata 全局事务（Seata特有的注解）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserWithTransaction</span><span class="params">(User updatedUser)</span> &#123;</span><br><span class="line">    <span class="comment">// 分支 1：更新 MySQL</span></span><br><span class="line">    userRepository.save(updatedUser);</span><br><span class="line">    <span class="comment">// 分支 2：更新 Redis</span></span><br><span class="line">    redisService.saveUser(updatedUser);</span><br><span class="line">    <span class="comment">// Seata 自动协调提交/回滚</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2PC工作流程（以Seata为例）</strong><br><strong>（一）第一阶段：本地提交</strong></p><ol><li>生成前镜像：将要操作的数据记录下来</li><li>执行SQL操作数据(期间启动MySQL的行锁，先对要操作的数据select …for update（此时数据被锁住，普通的select可以读取，要看隔离级别。还有如果读操作的select..for update这种想加锁的读是不可以的），再执行后续sql，执行完则释放行锁)</li><li>生成后镜像：将操作后的数据记录下</li><li>前镜像和后镜像等待保存到uodo_log日志表中</li><li>向TC注册分支，在TC中申请一个全局锁，锁定操作的数据防止其他人操作，读同上，有锁才能操作。注意这里TC的全局锁不是MySQL的全局锁，MySQL的全局锁是锁整个数据库，而TC的全局锁相当于MySQL的行级别锁，只锁操作的数据。</li><li>本地事务提交；将业务数据和uodo_log日志表数据一起保存到当前事务的的表中</li><li>和TC汇报事务执行状态</li></ol><p><strong>（二）第二阶段：提交&#x2F;回滚</strong></p><ol><li>若各分支事务都成功：删除uodo_log记录<br>（1）TC能感知到每个事务的状态，通知他们进行提交<br>（2）给异步任务对列添加异步任务，异步+批量删除对应的uodo_log日志表的记录</li><li>若某个事务失败，TC会通知所有分支事务回滚：拿到前镜像，数据恢复，删除uodo_log记录<br>（1）先找到uodo_log记录（通过XID，BranchID）<br>（2）数据校验，后镜像和当前数据是否一致，一致就ok执行回滚；不一致说明当前数据被其他操作给篡改了，需要配置相应的策略（怎么处理这个脏数据，忽略还是人工处理？之类）<br>（3）若一致，则回滚数据到前镜像的内容，完成后删除uodo_log记录</li><li>只要有分支事务没处理完，全局锁会一直存在。但是第一阶段执行事务是真正提交了的，不会在第二阶段一直阻塞数据库</li></ol><p><img src="/img/page/Seata%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="本地图片示例"><br><em>图片说明：本图片来自尚硅谷</em>  </p><h3 id="补偿机制（MQ-CDC兜底方案）"><a href="#补偿机制（MQ-CDC兜底方案）" class="headerlink" title="补偿机制（MQ&#x2F;CDC兜底方案）"></a>补偿机制（MQ&#x2F;CDC兜底方案）</h3><p>核心思想：通过定期检查和补偿，纠正异步同步失败导致的不一致，定时任务扫描MySQL和Redis数据差异，自动修复不一致。<br>适合低频变更，容忍延迟的场景，无需额外的中间件，适合作为异步方案的兜底机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled(fixedRate = 60000)</span> <span class="comment">// 每分钟执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">compensate</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = userRepository.findAll();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">redisUser</span> <span class="operator">=</span> redisService.getUser(user.getId());</span><br><span class="line">        <span class="keyword">if</span> (redisUser == <span class="literal">null</span> || !redisUser.getName().equals(user.getName())) &#123;</span><br><span class="line">            redisService.saveUser(user); <span class="comment">// 修复 Redis</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Compensated user: &quot;</span> + user.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 组件 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 精选 </tag>
            
            <tag> 热门 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Redis </tag>
            
            <tag> 数据一致性 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/08/15/hello-world/"/>
      <url>/2025/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
